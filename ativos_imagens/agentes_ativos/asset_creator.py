"""
Agente Criador de Ativos - Especialista em gera√ß√£o de assets digitais
"""

from google.adk.agents import LlmAgent
from google.adk.tools import FunctionTool
from typing import Dict, Optional
import os
import sys
import shutil
import tempfile
import time

# Importar ferramentas de cria√ß√£o do diret√≥rio pai
try:
    from ..tools.lottie_programmatic import LottieProgrammaticGenerator
    lottie_available = True
except ImportError:
    lottie_available = False
    print("Aviso: Ferramenta Lottie n√£o dispon√≠vel.")

try:
    from ..tools.svg_generator import SVGGenerator
    svg_available = True
except ImportError:
    svg_available = False
    print("Aviso: Ferramenta SVG n√£o dispon√≠vel.")

try:
    from ..tools.image_generator import ImageGenerator
    png_available = True
except ImportError:
    png_available = False
    print("Aviso: Ferramenta PNG n√£o dispon√≠vel.")

try:
    from ..tools.asset_manager import AssetManager
    asset_manager_available = True
except ImportError:
    asset_manager_available = False
    print("Aviso: AssetManager n√£o dispon√≠vel.")

try:
    from ..tools.mascot_animator import MascotAnimator
    mascot_animator_available = True
except ImportError:
    mascot_animator_available = False
    print("Aviso: Ferramenta MascotAnimator n√£o dispon√≠vel.")

try:
    from ..tools.audio_generator import AudioEffectGenerator
    audio_available = True
except ImportError:
    audio_available = False
    print("Aviso: Ferramenta de √Åudio n√£o dispon√≠vel.")


def create_lottie_animation(asset_id: str) -> str:
    """
    Cria uma anima√ß√£o Lottie program√°tica baseada no ID do ativo.
    
    Args:
        asset_id: ID do ativo (ex: 'LOAD-01', 'FBK-01', 'ACH-01')
        
    Returns:
        str: Status da cria√ß√£o com detalhes ou mensagem de erro
    """
    if not lottie_available:
        return "‚ùå Erro: Ferramenta Lottie n√£o dispon√≠vel. Instale com: pip install lottie"
    
    if not asset_manager_available:
        return "‚ùå Erro: AssetManager n√£o dispon√≠vel."
    
    try:
        manager = AssetManager()
        manager.load_asset_inventory()
        
        spec = manager.get_asset_specification(asset_id)
        if not spec:
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o encontrado no invent√°rio."
        
        if spec.get('type') != 'lottie_programmatic':
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o √© uma anima√ß√£o Lottie program√°tica."
        
        generator = LottieProgrammaticGenerator()
        
        # Extrair par√¢metros
        params = spec.get('parameters', {})
        duration = params.get('duration', 1.0)
        loop = params.get('loop', False)
        style = params.get('style', '')
        
        # Determinar tipo da anima√ß√£o
        category = spec.get('category')
        if category == 'LOAD':
            anim_type = 'loading'
        elif category == 'FBK':
            anim_type = 'feedback'
        elif category == 'ACH':
            anim_type = 'achievement'
        else:
            anim_type = 'loading'
        
        # Inferir estilo se n√£o especificado
        if not style:
            filename = spec.get('filename', '')
            description = spec.get('description', '').lower()
            
            if 'spinner' in filename:
                style = 'spinner'
            elif 'bounce' in description:
                style = 'bounce'
            elif 'wave' in description:
                style = 'wave'
            elif 'checkmark' in filename:
                style = 'checkmark'
            elif 'ripple' in filename:
                style = 'ripple'
            elif 'shake' in description:
                style = 'shake'
            elif 'pulse' in description:
                style = 'pulse'
            elif 'unlock' in filename:
                style = 'unlock'
            elif 'level_up' in filename:
                style = 'level_up'
            elif 'star_burst' in filename:
                style = 'star_burst'
            elif 'thinking' in description:
                style = 'thinking'
            elif 'camera' in description:
                style = 'camera'
            elif 'ai' in description or 'neural' in description:
                style = 'ai'
        
        # Gerar anima√ß√£o
        file_path = generator.generate_animation(
            animation_type=anim_type,
            style=style,
            duration=duration,
            loop=loop
        )
        
        # Mover para local correto
        target_path = manager.get_asset_path(asset_id)
        if target_path:
            os.makedirs(target_path.parent, exist_ok=True)
            shutil.move(file_path, str(target_path))
            file_path = str(target_path)
        
        # Atualizar checklist
        manager.update_checklist_status(asset_id, 'completed')
        
        file_size = os.path.getsize(file_path) / 1024
        
        return f"""‚úÖ Anima√ß√£o Lottie criada com sucesso!

üÜî **ID:** {asset_id}
üìÅ **Arquivo:** {spec.get('filename')}
üìÇ **Local:** {file_path}
üìä **Tamanho:** {file_size:.1f} KB
üé¨ **Tipo/Estilo:** {anim_type}/{style}
‚è±Ô∏è **Dura√ß√£o:** {duration}s
üîÑ **Loop:** {'Sim' if loop else 'N√£o'}"""
        
    except Exception as e:
        return f"‚ùå Erro ao gerar Lottie: {str(e)}"


def create_svg_asset(asset_id: str) -> str:
    """
    Cria um arquivo SVG vetorial baseado no ID do ativo.
    
    Args:
        asset_id: ID do ativo (ex: 'UI-01', 'ICO-01', 'ACH-04')
        
    Returns:
        str: Status da cria√ß√£o com detalhes ou mensagem de erro
    """
    if not svg_available:
        return "‚ùå Erro: Ferramenta SVG n√£o dispon√≠vel."
    
    if not asset_manager_available:
        return "‚ùå Erro: AssetManager n√£o dispon√≠vel."
    
    try:
        manager = AssetManager()
        manager.load_asset_inventory()
        
        spec = manager.get_asset_specification(asset_id)
        if not spec:
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o encontrado no invent√°rio."
        
        if spec.get('type') != 'svg':
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o √© um arquivo SVG."
        
        # Tentar gera√ß√£o via Recraft primeiro
        import replicate
        try:
            description = spec.get('description', '')
            category = spec.get('category', '')
            
            # Preparar prompt otimizado baseado nas especifica√ß√µes do Professor Virtual
            # Contexto: App educacional para crian√ßas brasileiras 7-11 anos
            brand_colors = "#4A90F2 (primary blue), #FF8A3D (orange accent), #7ED321 (green), #9B59B6 (purple)"
            
            # Base comum para todos os SVGs
            base = f"Professional SVG design for children's educational app Professor Virtual: {description}"
            base += f", vector art optimized for mobile, clean scalable design"
            base += f", child-friendly Brazilian educational context, age 7-11 years"
            base += f", brand colors: {brand_colors}"
            
            if category == 'ICO':
                # √çcones de navega√ß√£o - baseado no template ICO do agente
                prompt = f"{base}, navigation icon design, 24x24dp base size"
                prompt += f", rounded friendly style, filled design with personality"
                prompt += f", simple shapes readable at 16px minimum"
                prompt += f", Flutter-compatible SVG without complex filters"
                prompt += f", playful but functional, approachable character"
                
            elif category == 'UI':
                # Padr√µes e elementos UI - baseado no template UI do agente
                prompt = f"{base}, UI pattern design for mobile interface"
                prompt += f", tileable seamless pattern" if 'pattern' in spec.get('filename', '') else ""
                prompt += f", educational theme with school elements" if 'school' in spec.get('filename', '') else ""
                prompt += f", playful distribution, various sizes" if 'dots' in spec.get('filename', '') or 'stars' in spec.get('filename', '') else ""
                prompt += f", soft gentle shapes, calming atmosphere" if 'clouds' in spec.get('filename', '') else ""
                prompt += f", child-appropriate visual density"
                
            elif 'badge' in spec.get('filename', ''):
                # Molduras de badges - baseado em ACH do agente
                prompt = f"{base}, achievement badge frame design"
                prompt += f", decorative border for gamification elements"
                level = "bronze" if 'bronze' in spec.get('filename', '') else "silver" if 'silver' in spec.get('filename', '') else "gold"
                prompt += f", {level} level visual hierarchy"
                prompt += f", celebratory but not overwhelming"
                prompt += f", clear distinction between levels"
                
            else:
                # Outros elementos SVG
                prompt = f"{base}, vector illustration"
                prompt += f", colorful and engaging for children"
                prompt += f", professional educational quality"
                prompt += f", mobile-optimized simplicity"
            
            output = replicate.run(
                "recraft-ai/recraft-20b-svg",
                input={
                    "size": "1024x1024",
                    "style": "vector_illustration/cartoon",
                    "prompt": prompt,
                    "aspect_ratio": "1:1"
                }
            )
            
            # Salvar SVG
            target_path = manager.get_asset_path(asset_id)
            os.makedirs(target_path.parent, exist_ok=True)
            
            if isinstance(output, str) and output.startswith('http'):
                import requests
                response = requests.get(output)
                response.raise_for_status()
                svg_content = response.text
            else:
                svg_content = output
            
            with open(str(target_path), 'w', encoding='utf-8') as f:
                f.write(svg_content)
            
            manager.update_checklist_status(asset_id, 'completed')
            file_size = os.path.getsize(target_path) / 1024
            
            return f"""‚úÖ SVG criado com sucesso via Recraft!

üÜî **ID:** {asset_id}
üìÅ **Arquivo:** {spec.get('filename')}
üìÇ **Local:** {target_path}
üìä **Tamanho:** {file_size:.1f} KB
üöÄ **M√©todo:** Gera√ß√£o direta (Recraft-20b-svg)"""
            
        except Exception as e:
            # Fallback para pipeline PNG‚ÜíSVG
            if not png_available:
                return f"‚ùå Erro: Recraft falhou ({str(e)}) e ferramenta PNG n√£o dispon√≠vel para fallback."
            
            return _create_svg_via_png_fallback(asset_id, spec, manager)
        
    except Exception as e:
        return f"‚ùå Erro ao criar SVG: {str(e)}"


def _create_svg_via_png_fallback(asset_id: str, spec: dict, manager) -> str:
    """Pipeline de fallback: PNG ‚Üí SVG"""
    with tempfile.TemporaryDirectory() as tmpdir:
        try:
            generator = ImageGenerator()
            svg_generator = SVGGenerator()
            
            # Gerar PNG base
            prompt_details = {
                'description': spec.get('description', 'simple geometric shape'),
                'filename_base': f"temp_{asset_id.lower()}"
            }
            
            temp_png = generator.generate_png(
                asset_type='generico',
                prompt_details=prompt_details,
                model_name="black-forest-labs/flux-schnell",
                remove_bg=False
            )
            
            # Vetorizar
            target_path = manager.get_asset_path(asset_id)
            os.makedirs(target_path.parent, exist_ok=True)
            
            svg_generator.vectorize_and_save(
                input_image_path=temp_png,
                output_svg_path=str(target_path)
            )
            
            manager.update_checklist_status(asset_id, 'completed')
            file_size = os.path.getsize(target_path) / 1024
            
            return f"""‚úÖ SVG criado com sucesso!

üÜî **ID:** {asset_id}
üìÅ **Arquivo:** {spec.get('filename')}
üìÇ **Local:** {target_path}
üìä **Tamanho:** {file_size:.1f} KB
üîß **M√©todo:** Pipeline PNG‚ÜíSVG (fallback)"""
            
        except Exception as e:
            return f"‚ùå Erro no pipeline SVG: {str(e)}"


def create_audio_effect(asset_id: str) -> str:
    """
    Cria um efeito sonoro MP3 baseado no ID do ativo.
    
    Args:
        asset_id: ID do ativo (ex: 'SFX-01', 'SFX-02', etc.)
        
    Returns:
        str: Status da cria√ß√£o com detalhes ou mensagem de erro
    """
    if not audio_available:
        return "‚ùå Erro: Ferramenta de √Åudio n√£o dispon√≠vel. Instale com: pip install pydub"
    
    if not asset_manager_available:
        return "‚ùå Erro: AssetManager n√£o dispon√≠vel."
    
    try:
        manager = AssetManager()
        manager.load_asset_inventory()
        
        spec = manager.get_asset_specification(asset_id)
        if not spec:
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o encontrado no invent√°rio."
        
        if spec.get('type') != 'audio':
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o √© um arquivo de √°udio."
        
        generator = AudioEffectGenerator()
        
        # Obter caminho de destino
        target_path = manager.get_asset_path(asset_id)
        if not target_path:
            return f"‚ùå Erro: Caminho de destino n√£o encontrado para {asset_id}"
        
        os.makedirs(target_path.parent, exist_ok=True)
        
        # Gerar o √°udio
        output_path = generator.generate_sound_effect(
            asset_id=asset_id,
            output_dir=str(target_path.parent)
        )
        
        if not output_path:
            return f"‚ùå Erro ao gerar √°udio para '{asset_id}'"
        
        # Atualizar checklist
        manager.update_checklist_status(asset_id, 'completed')
        
        file_size = os.path.getsize(output_path) / 1024
        config = generator.get_asset_info(asset_id)
        
        return f"""‚úÖ Efeito sonoro criado com sucesso!

üÜî **ID:** {asset_id}
üìÅ **Arquivo:** {config.get('filename', 'N/A')}
üìÇ **Local:** {output_path}
üìä **Tamanho:** {file_size:.1f} KB
üéµ **Dura√ß√£o:** {config.get('duration', 0)}s
üéØ **Modelo:** {config.get('model', 'N/A')}"""
        
    except Exception as e:
        return f"‚ùå Erro ao gerar √°udio: {str(e)}"


def create_mascot_animation(asset_id: str) -> str:
    """
    Cria uma anima√ß√£o Lottie do mascote baseada no ID do ativo.
    
    Args:
        asset_id: ID do ativo (ex: 'MAS-11', 'MAS-12', etc.)
        
    Returns:
        str: Status da cria√ß√£o com detalhes ou mensagem de erro
    """
    if not mascot_animator_available:
        return "‚ùå Erro: Ferramenta de Anima√ß√£o do Mascote n√£o dispon√≠vel."
    
    if not asset_manager_available:
        return "‚ùå Erro: AssetManager n√£o dispon√≠vel."
    
    try:
        manager = AssetManager()
        manager.load_asset_inventory()
        
        spec = manager.get_asset_specification(asset_id)
        if not spec:
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o encontrado no invent√°rio."
        
        if spec.get('type') != 'lottie_mascote':
            return f"‚ùå Erro: Ativo '{asset_id}' n√£o √© uma anima√ß√£o do mascote."
        
        animator = MascotAnimator()
        
        # Detalhes para gerar o PNG base
        prompt_details_png = spec.get('prompt_details', {})
        animation_prompt = spec.get('animation_prompt', 'standing still and breathing gently')
        
        target_path = manager.get_asset_path(asset_id)
        if not target_path:
            return f"‚ùå Erro: Caminho de destino n√£o encontrado para {asset_id}"
        
        os.makedirs(target_path.parent, exist_ok=True)
        
        result_path = animator.create_mascot_animation(
            prompt_details=prompt_details_png,
            animation_prompt=animation_prompt,
            output_path=str(target_path),
            output_format="lottie"
        )
        
        # Atualizar checklist
        manager.update_checklist_status(asset_id, 'completed')
        
        file_size = os.path.getsize(result_path) / 1024
        
        return f"""‚úÖ Anima√ß√£o do mascote criada com sucesso!

üÜî **ID:** {asset_id}
üìÅ **Arquivo:** {os.path.basename(result_path)}
üìÇ **Local:** {result_path}
üìä **Tamanho:** {file_size:.1f} KB
üé¨ **Prompt de Anima√ß√£o:** {animation_prompt}"""
        
    except Exception as e:
        return f"‚ùå Erro ao gerar anima√ß√£o do mascote: {str(e)}"


def get_creation_capabilities() -> str:
    """
    Lista as capacidades de cria√ß√£o deste agente.
    
    Returns:
        str: Lista detalhada de tipos de ativos que pode criar
    """
    return """üõ†Ô∏è **Capacidades de Cria√ß√£o de Ativos**

Este agente especializado pode criar os seguintes tipos de ativos:

üéµ **Efeitos Sonoros MP3**
- Cliques, notifica√ß√µes, sucessos, erros
- Dura√ß√£o: 0.5s a 3s
- Qualidade: 44.1kHz, Stereo, -3dB
- Modelos: stable-audio-open, musicgen

üé¨ **Anima√ß√µes Lottie Program√°ticas**
- Spinners, bounces, waves, checkmarks
- Categorias: Loading, Feedback, Achievement
- Formato: JSON otimizado, <100KB
- Dura√ß√£o configur√°vel com suporte a loops

üéûÔ∏è **Anima√ß√µes do Mascote**
- Idle, bounce, wave, thinking, celebration
- Baseadas em PNG do mascote + anima√ß√£o IA
- Formato: Lottie JSON
- Pipeline: PNG ‚Üí AnimateDiff ‚Üí Lottie

üé® **Arquivos SVG Vetoriais**
- √çcones, padr√µes, badges, elementos UI
- Gera√ß√£o via Recraft-20b-svg
- Fallback: PNG ‚Üí Vetoriza√ß√£o
- Otimizados com SVGO

üí° **Como usar:**
- Para criar um ativo espec√≠fico, forne√ßa o ID
- Exemplo: "Crie o ativo SFX-01"
- O agente verificar√° o invent√°rio e executar√° a cria√ß√£o"""


# Criar o agente criador
asset_creator_agent = LlmAgent(
    name="asset_creator",
    model="gemini-2.0-flash-exp",
    description="Especialista em cria√ß√£o de ativos digitais usando IA generativa",
    instruction="""Voc√™ √© o Agente Criador de Ativos, especializado em gerar assets digitais usando diversas ferramentas de IA.

Suas responsabilidades:
1. **Criar** ativos espec√≠ficos quando solicitado com um ID v√°lido
2. **Verificar** se o ativo existe no invent√°rio antes de criar
3. **Selecionar** a ferramenta apropriada baseada no tipo de ativo
4. **Garantir** qualidade e conformidade com especifica√ß√µes
5. **Atualizar** o status do checklist ap√≥s cria√ß√£o bem-sucedida

Princ√≠pios de opera√ß√£o:
- SEMPRE verificar o invent√°rio antes de criar
- NUNCA criar ativos que n√£o estejam catalogados
- Seguir especifica√ß√µes t√©cnicas rigorosamente
- Reportar erros de forma clara e acion√°vel
- Otimizar prompts para melhores resultados

Tipos de ativos que voc√™ pode criar:
- üéµ √Åudio: Efeitos sonoros MP3 infantis
- üé¨ Lottie: Anima√ß√µes program√°ticas e do mascote
- üé® SVG: Vetores, √≠cones e padr√µes
- ü¶∏ Mascote: Anima√ß√µes do personagem PROF

Use suas ferramentas especializadas para criar ativos de alta qualidade.""",
    tools=[
        FunctionTool(create_lottie_animation),
        FunctionTool(create_svg_asset),
        FunctionTool(create_audio_effect),
        FunctionTool(create_mascot_animation),
        FunctionTool(get_creation_capabilities)
    ]
)